---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mikai233.
--- DateTime: 2022/12/22 12:29
---

---@class MessageWaitQueue
MessageWaitQueue = {}

---@param name string
---@param msg table
---@param callback function(table)
---@param receiver table
function send_message(name, msg, callback, receiver)
    msg = msg or {}
    local id, bytes = encode_req(name, msg)
    if id ~= nil then
        MessageHelper:send_message(id, bytes)
        if callback then
            MessageWaitQueue:add_callback(id, callback, receiver)
        end
    end
end

---@param id number
---@param callback function
---@param receiver table
function MessageWaitQueue:add_callback(id, callback, receiver)
    local queue = self:get_msg_queue(id)
    table.insert(queue, { callback = callback, receiver = receiver })
end

---@param id number
---@return table
function MessageWaitQueue:get_msg_queue(id)
    local queue = MessageWaitQueue[id]
    if queue then
        return queue
    else
        MessageWaitQueue[id] = {}
        return MessageWaitQueue[id]
    end
end

---@param id number
---@param resp table
function MessageWaitQueue:on_resp(id, resp)
    local queue = MessageWaitQueue:get_msg_queue(id)

    for _, waitCb in ipairs(queue) do
        local callback = waitCb.callback
        local receiver = waitCb.receiver
        if receiver then
            callback(receiver, resp)
        else
            callback(resp)
        end
    end
    --clear the wait queue
    MessageWaitQueue[id] = {}
end

---@class MessageDispatcher
MessageDispatcher = {
    listeners = {},
}

---@param name string
---@param callback function(table)
---@param receiver table
function MessageDispatcher:add_listener(name, callback, receiver)
    self:remove_listener(name, callback)
    local listeners = self:get_listeners(name)
    local listener = { callback = callback, receiver = receiver }
    table.insert(listeners, listener)
    debug("add resp callback:{}", name)
end

---@param name string
---@param callback function
function MessageDispatcher:remove_listener(name, callback)
    local listeners = self:get_listeners(name)
    for i = #listeners, 1, -1 do
        local listener = listeners[i]
        if listener.callback == callback then
            table.remove(listeners, i)
            info("duplicate callback add, remove previous callback")
        end
    end
end

---@param name string
---@param resp table
function MessageDispatcher:on_resp(name, resp)
    local listeners = self:get_listeners(name)
    if listeners then
        for _, listener in ipairs(listeners) do
            local callback = listener.callback
            local receiver = listener.receiver
            if receiver then
                callback(receiver, resp)
            else
                callback(resp)
            end
        end
    end
end

---@param name string
---@return table
function MessageDispatcher:get_listeners(name)
    local listeners = self.listeners[name]
    if listeners then
        return listeners
    else
        self.listeners[name] = {}
        return self.listeners
    end
end