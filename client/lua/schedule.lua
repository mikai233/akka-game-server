---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mikai233.
--- DateTime: 2022/12/20 11:19
---

function handle_schedule(key, now)
    LuaScheduler:on_schedule(key, now)
end

---@class LuaScheduler
LuaScheduler = {
    listeners = {},
}

---@param delay number millis
---@param callback function
---@param receiver table
function LuaScheduler:schedule_once(delay, callback, receiver)
    local key = self:new_schedule_key()
    local listeners = self:get_listeners()
    local listener = { callback = callback, receiver = receiver, type = "once" }
    listeners[key] = listener
    Scheduler:schedule_once(key, delay)
    info("schedule once at:{}ms with key:{}", delay, key)
    return key
end

---@param initial_delay number millis
---@param interval number millis
---@param callback function
---@param receiver table
function LuaScheduler:schedule_at_fixed_rate(initial_delay, interval, callback, receiver)
    local key = self:new_schedule_key()
    local listeners = self:get_listeners()
    local listener = { callback = callback, receiver = receiver, type = "fixedRate" }
    listeners[key] = listener
    Scheduler:schedule_at_fixed_rate(key, initial_delay, interval)
    info("schedule at fixed rate at initial delay:{}ms interval:{}ms with key:{}", initial_delay, interval, key)
    return key
end

---@param key string
function LuaScheduler:cancel_schedule(key)
    local listeners = self:get_listeners()
    local listener = listeners[key]
    listener = nil
    Scheduler:cancel_schedule(key)
    info("cancel schedule with key:{}", key)
end

---@param key string
---@param now number millis
function LuaScheduler:on_schedule(key, now)
    local listeners = self:get_listeners()
    local listener = listeners[key]
    if listener then
        local callback = listener.callback
        local receiver = listener.receiver
        local type = listener.type
        if receiver then
            callback(receiver)
        else
            callback()
        end
        if type == "once" then
            listener = nil
        end
    else
        warn("the listener with key:{} not exists, schedule will cancel", key)
        self:cancel_schedule(key)
    end
end

function LuaScheduler:get_listeners()
    return self.listeners
end

---@return string
function LuaScheduler:new_schedule_key()
    return Utils.uuid()
end