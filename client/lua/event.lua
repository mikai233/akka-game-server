---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mikai.
--- DateTime: 2022/12/20 22:39
---

local inspect = require("lua/ext/inspect")

---@class EventDispatcher
EventDispatcher = {
    listeners = {},
}

-- rust side event
function handle_event(event, params)
    EventDispatcher:dispatch_event(event, params)
    debug("publish rust side event:{} with params:{}", event, inspect(params))
end

---@param event string
---@vararg any
function EventDispatcher:publish_event(event, ...)
    if event == nil then
        warn("ignore nil event")
        return
    end
    debug("publish lua event:{}", event)
    self:dispatch_event(event, ...)
end

---@param event string
---@param callback function
---@param receiver table
function EventDispatcher:add_listener(event, callback, receiver)
    self:remove_event_listener(event, callback)
    local listeners = self:get_event_listeners(event)
    local listener = { callback = callback, receiver = receiver }
    table.insert(listeners, listener)
    debug("add event callback:{}", event)
end

---@param event string
---@param callback function
function EventDispatcher:remove_event_listener(event, callback)
    local listeners = self:get_event_listeners(event)
    for i = #listeners, 1, -1 do
        local listener = listeners[i]
        if listener.callback == callback then
            table.remove(listeners, i)
            warn("duplicate callback add, remove previous callback")
        end
    end
end

---@param event string
---@vararg any
function EventDispatcher:dispatch_event(event, ...)
    local listeners = self:get_event_listeners(event)
    if listeners then
        for _, listener in ipairs(listeners) do
            local callback = listener.callback
            local receiver = listener.receiver
            if receiver then
                callback(receiver, ...)
            else
                callback(...)
            end
        end
    end
end

---@param event string
---@return table
function EventDispatcher:get_event_listeners(event)
    local listeners = self.listeners[event]
    if listeners then
        return listeners
    else
        self.listeners[event] = {}
        return self.listeners
    end
end