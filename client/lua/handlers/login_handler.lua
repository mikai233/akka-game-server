---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by mikai233.
--- DateTime: 2022/12/22 15:11
---

local player_mgr = require("lua/managers/player_manager")
local json = require("lua/ext/json")
local tools = require("lua/tools")

local LoginHandler = {

}

function LoginHandler:init()
    EventDispatcher:add_listener(Rust2LuaEvent.Connected(), self.on_connected, self)
    EventDispatcher:add_listener(Rust2LuaEvent.SharedKeyHaveSet(), self.on_share_key_set, self)
    EventDispatcher:add_listener(LuaEvent.LoginSuccess, self.on_login_success, self)
    MessageDispatcher:add_listener("LoginResp", self.handle_login_resp, self)
    MessageDispatcher:add_listener("PingResp", self.handle_ping_resp, self)
    MessageDispatcher:add_listener("CreateRoleResp", self.handle_create_role_resp, self)
    MessageDispatcher:add_listener("SCChannelExpired", self.on_sc_channel_expired, self)
    info("LoginHandler init done")
end

function LoginHandler:on_connected()
    local login_req = {
        account = Config.account,
        world_id = Config.world_id,
        client_public_key = ClientPublicKey,
        client_zone = "Asia/Shanghai",
        client_ip = Config.client_ip,
    }
    send_message("LoginReq", login_req)
end

---@param resp LoginResp
function LoginHandler:handle_login_resp(resp)
    local server_public_key = resp.server_public_key
    local set_shared_key = Lua2RustEvent.SetSharedKey(server_public_key)
    MessageHelper:publish_event(set_shared_key)
    if resp.result ~= LoginResult.Success then
        warn("client will shutdown because of {}", resp.result)
        local shutdown = Lua2RustEvent.Shutdown()
        MessageHelper:publish_event(shutdown)
        return
    end
    if resp.result == LoginResult.Success or resp.player_info.nickname == "" then
        self:create_role()
    end
end

function LoginHandler:handle_ping_resp(resp)
    player_mgr:set_server_time(resp.server_timestamp)
end

function LoginHandler:send_ping()
    local now = Utils.unix_timestamp()
    local req = { client_timestamp = now }
    send_message("PingReq", req)
end

function LoginHandler:on_share_key_set()
    EventDispatcher:publish_event(LuaEvent.LoginSuccess)
end

function LoginHandler:on_login_success()
    local key = LuaScheduler:schedule_at_fixed_rate(0, 1000, self.send_ping, self)
    player_mgr:set_ping_schedule_key(key)
end

function LoginHandler:create_role()
    send_message("RandomNicknameReq", { sex = Config.sex }, function(resp)
        send_message("CreateRoleReq", { nickname = resp.nickname, sex = Config.sex, client_ip = Config.client_ip })
    end)
end

function LoginHandler:handle_create_role_resp(resp)

end

function LoginHandler:on_sc_channel_expired(notify)
    warn("client will shutdown because of {}", notify.reason)
    local shutdown = Lua2RustEvent.Shutdown()
    MessageHelper:publish_event(shutdown)
end

return LoginHandler